steps:
  - id: "Test flask app"
    name: "python"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      pip install pytest
      pip install flask gunicorn
      pip install flask-wtf
      pip install flask-bootstrap
      pip install Flask-Cors
      pip install google-cloud-firestore
      pip install google-cloud-logging
      pytest -v -s


  - id: "Build docker image"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      docker build . -t ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_SERVICE_NAME}/${_SERVICE_NAME}
      docker push ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_SERVICE_NAME}/${_SERVICE_NAME}

  - id: "Setup gcloud & get latest docker digest"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud config set project ${PROJECT_ID}

      dockerSHA=`gcloud artifacts docker images list ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_SERVICE_NAME} --limit=1 --sort-by=~CREATE_TIME | grep sha256 | cut -d ' ' -f 3`
      echo $dockerSHA > /workspace/first.txt


  - id: "Update cloud run service"
    name: "gcr.io/${PROJECT_ID}/terraform"
    entrypoint: 'bash'
    args:
    - '-c' 
    - |
      dockerSHA=$(cat /workspace/first.txt)
      echo $dockerSHA

      terraform -chdir=terraform init
      terraform -chdir=terraform import google_service_account.cloud_resume_challenge_worker projects/${PROJECT_ID}/serviceAccounts/crc-worker-id@${PROJECT_ID}.iam.gserviceaccount.com
      terraform -chdir=terraform import google_cloud_run_service.cloud-resume-challenge ${_REGION}/${PROJECT_ID}/${_SERVICE_NAME}
      terraform -chdir=terraform apply -auto-approve -var project=${PROJECT_ID} -var imagesha=$dockerSHA

options:
  logStreamingOption: STREAM_ON

substitutions:
  _SERVICE_NAME: cloud-resume-challenge

images:
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_SERVICE_NAME}/${_SERVICE_NAME}"